[Java 8. Полное руководство. Г. Шилдт. 9 издание 2015 год]


--------------------------------------------------------------------


[interface]:

1) ПРОГРАММИРОВАТЬ НЕОБХОДИМО НА ОСНОВЕ ИНТЕРФЕЙСА, А НЕ ЕГО РЕАЛИЗАЦИИ.

2) В интерфейсе определяется то, ЧТО необходимо делать.
То КАК необходимо делать то, что определено в интерфейсе, определяется в классе, кот. реализует данный интерфейс. 

3) В интерфейсе могут быть объявлены поля (константы) и методы.
3.1 - Поля неявно объявляются как final и static, т.е. их нельзя изменить в классе, реализующем интерфейс. Также они должны быть проинициализированы при объявлении интерфейса.
3.2 - Объявление метода содержит только его сигнатуру без тела метода.

4) Все методы и переменные в интерфейсе неявно объявляются как public.

5) Класс, реализующий интерфейс, должен реализовать все объявленные в интерфейсе методы.
Если класс реализует не все методы реализуемого интерфейса, то он должен быть объявлен как абстрактый.

6) Интерфейс может наследоваться (расширять) от другого интерфейса.
В этом случае класс, реализующий такой интерфейс должен реализовать все методы, определенные в цепочке наследования интерфейсов.

7) Класс может реализовать несколько интерфейсов, в то время как класс может наследоваться только от одного суперкласса (абстрактоного или неабстрактного).
!!! Интерфейс может наследоваться сразу от нескольких интерфейсов.

8) Можно объявить интерфейс, кот. не содержит ниодного метода, но содержит несколько полей (констант). И далее эти константы будут доступны всем классам, реализующим данный интерфейс (так можно получить своего рода гловальные константы).

9) ИНТЕРФЕЙС отличается от КЛАССА в первую очередь тем, что не позволяет сохранять данные состояния, т.е. не может содержать переменные экземпляра и нельзя создать экземпляр интерфейса.

10) Начиная с версии JDK 8 интерфейс может содержать методы "по умолчанию".
Такой метод имеет тело (т.е. конкретную реализацию) и в начале его сигнатуры указывается ключевое слово default.
В классе, реализующем интерфейс, методы "по умолчанию" реализовывать не нужно, т.к. их реализация уже содержится в интерфейсе.
В классе, реализующем интерфейс, можно переопределять методы "по умолчанию".

11) Начиная с версии JDK 8 интерфейс может содержать статические методы.
Такой метод имеет тело (т.е. конкретную реализацию) и в начале его сигнатуры указывается ключевое слово static.
Статический метод интерфейса вызывается также как и статичекий метод класса: имя_интерфейса.имя_метода()
Для вызова статического метода экземпляр или реализация интерфейса не требуется.
Статический метод НЕ НАСЛЕДУЕТСЯ реализующим его классом или наследующим его интерфейсом.


--------------------------------------------------------------------


[abstract class]:

1) Класс, содержащий хотя бы один абстрактый метод, должен быть объявлен как абстрактый.
Объявление абстрактоного метода содержит только сигнатуру метода, а его тело отсутствует.

2) Нельзя объявлять абстрактные конструкторы. 
Можно объявлять неабстрактный (конкретный) конструктор, но нельзя его вызывать используя оператор new, т.к. (см. п.3).

3) Невозможно создать объект (экземпляр) абстрактного класса.
Т.к. такой объект не имеет практического смысла.

4) Любой подкласс, производный от абстрантного суперкласса, должен реализовать все абстрактные методы из своего суперкласса.
Или также быть объявленным как абстрактый.

5) Если абстракный или неабстрактный суперкласс имеет конструктор отличный от конструктора "по умолчанию", кот. имеет аргумент(ы), то любой подкласс данного суперкласса должен из своего конструктора вызывать коструктор суперкласса с необходимыми ему параметрами через ключевое слово super (ссылку на суперкласс)

6) В абстрактном классе можно объявлять неабстрактные (конкретные) методы.

7) В абстракном классе можно объявлять поля (свойства).


--------------------------------------------------------------------


[модификаторы доступа]: стр. 238-239





