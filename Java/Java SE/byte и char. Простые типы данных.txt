Как известно все данные на жестком диске хранятся в виде двоичного кода (в виде нулей и единиц).
Т.е. одна микросхема памяти - это, грубо говоря, огромное количество дорожек. Одна дорожка - это один бит.
Намагниченная дорожка - это единица, а размагниченная - это ноль.

Любой символ (цифры: 0-9, буквы: A-Z и тд), т.е. экземпляр примитивного типа "char" можно выразить с помощью последовательности из 8 бит (1 байт), т.е. через экземпляр примитивного типа "byte".

Например (^ - возведение в степень):

Цифра 1 - это 00000001, т.е. 0*2^7 + 0*2^6 + 0*2^5 + 0*2^4 + 0*2^3 + 0*2^2 + 0*2^1 + 1*2^0 = 1
Цифра 9 - это 00001001, т.е. 0*2^7 + 0*2^6 + 0*2^5 + 0*2^4 + 1*2^3 + 0*2^2 + 0*2^1 + 1*2^0 = 8 + 1 = 9
Цифра 14 - это 00001110, т.е. 0*2^7 + 0*2^6 + 0*2^5 + 0*2^4 + 1*2^3 + 1*2^2 + 1*2^1 + 0*2^0 = 8 + 4 + 2 = 14
Буква h - это 01101000
Символ пробела - это 00100000

и т.д.

Т.е. каждый символ можно представить в виде последовательности из 8 бит (в виде 1 байта).

Представление данных в виде байтов необходимо, например, для передачи через сеть, для вывода в файл, для манипуляций с данными, кот. передаются в виде байт и еще никак не обработаны и не интерпретированы.


Пример:
--------

1) В данном примере мы прочитаем первые 52 символа из файла, в котором находится код данной программы, для демонстрации побайтного считывания из файла, преобразования байт (byte) в символы (char) и вывод результата в консоль.

Main.java
----------

// Example per byte reading from file
package main;

import java.io.FileInputStream;
import java.io.IOException;


public class Main {
    
    public static void main(String[] args){
        
        // Открываем поток считывания из файла
        try(FileInputStream fis = new FileInputStream("src/main/Main.java")){
            // Считываем первые 52 байта и выводим их в консоль приводя к типу char
            // т.е. преобразуя каждый байт в символ
            for (int i = 0; i < 52; i++){
                System.out.print((char) fis.read());                
            }
            System.out.println();
        }
        catch (IOException e){
            System.err.println(e.fillInStackTrace());
        }
        
    }    
}


Для побайтного считывания из файла Main.java мы используем экземпляр типа FileInputStream и его метод read(), каждый вызов которого читает ОДИН байт.
Далее в цикле мы считываем первые 52 байта, преобразуем каджый байт в символ и выводим в консоль.
Т.е. в результате получаем текст из 52 символов, что равно первым 2ум строкам файла Main.java

РЕЗУЛЬТАТ ВЫПОЛНЕНИЯ ПРОГРАММЫ:

// Example per byte reading from file
package main;

-------------------------------------------------------------------------------------------


2) В данном примере мы опять прочитаем первые 52 символа из файла, в котором находится код данной программы и выведем результат в консоль. Но сделаем мы это более рациональным образом: 
- создадим массив байт размером 52 байта
- передадим данный массив методу read экземпляра типа FileInputStream, который наполнит его первыми 52 байтами из файла Main.java
- и передадим наполненый массив конструктору класса String, который преобразуем массив байт в текстовую строку.

 
Main.java
----------
 
 // Example per byte reading from file
package main;

import java.io.FileInputStream;
import java.io.IOException;


public class Main {
    
    public static void main(String[] args){
        
        // Открываем поток считывания из файла
        try(FileInputStream fis = new FileInputStream("src/main/Main.java")){
            // Создаем массив байт длиной 52 байта
            byte[] bytes = new byte[52];
            // Считываем первые 52 байта из потока ввода из файла Main.java в массив
            fis.read(bytes);
            // Создаем строку из 52 байт массива байтов, 
            // которые автоматически преобразуются в символы (char)
            String s = new String(bytes, 0, 52);
            // Выводим результат в консоль
            System.out.println(s);
        }
        catch (IOException e){
            System.err.println(e.fillInStackTrace());
        }
        
    }    
}


РЕЗУЛЬТАТ ВЫПОЛНЕНИЯ ПРОГРАММЫ такой же:

// Example per byte reading from file
package main;

