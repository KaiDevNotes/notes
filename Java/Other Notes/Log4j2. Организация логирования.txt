Официальная документация: 
https://logging.apache.org/log4j/2.x/manual/index.html

Отличная ознакомительная статья:
http://www.journaldev.com/7128/log4j2-example-tutorial-configuration-levels-appenders



-----------------------------------------
ОРГАНИЗАЦИЯ ЛОГИРОВАНИЯ С ПОМОЩЬЮ LOG4J2:
-----------------------------------------


1 - Maven зависимости:

<dependency>
	<groupId>org.apache.logging.log4j</groupId>
	<artifactId>log4j-api</artifactId>
	<version>2.7</version>
</dependency>
<dependency>
	<groupId>org.apache.logging.log4j</groupId>
	<artifactId>log4j-core</artifactId>
	<version>2.7</version>
</dependency>


--------------------------------------------------------------------


2 - Конфигурируем Log4j2 с помощью xml-файла (существуют и другие способы, см. документацию)

2.1 - Распологаем файл с название Log4j2.xml в CLASSPATH проекта.
Например, если это Maven проект в директории "../src/main/resources"

2.2 - Log4j2.xml
-----------
<?xml version="1.0" encoding="UTF-8"?>
<Configuration>    
    <Appenders>
        <Console name="ConsoleAppender">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n"/>
        </Console>
        <File name="FileAppender" fileName="D:/Log4j2_example.log">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n"/>
        </File>
    </Appenders>      
    <Loggers>
        <Root level="ERROR">
            <AppenderRef ref="ConsoleAppender" level="ERROR"/>
        </Root>
        <logger name="com.kai.dev.main" level="ALL">
            <AppenderRef ref="ConsoleAppender" level="DEBUG"/>
            <AppenderRef ref="FileAppender" level="ALL"/>
		</logger>
    </Loggers>    
</Configuration>
-----------

2.2.1 - В теге <Appenders> распологается описание необходимых appender'ов.
В данном примере нам необходим appender для вывода в файл и в консоль. 
В документации описано множество других (в БД и тд).

2.2.2 - Имя аппендера задается произвольно.

2.2.3 - В PatternLayout задается шаблон лог-сообщений для вывода. Пояснение:

%d{yyyy-MM-dd HH:mm:ss} — выводит дату в формате 2014-01-14 23:55:57

%-5p — выводит уровень лога (ERROR, DEBUG, INFO …), цифра 5 означает что всегда использовать 5 символов  остальное дополнится пробелами, а минус (-), то что позиционирование по левой стороне.

%c{1} — категория, в скобках указывается сколько уровней выдавать. Так как у нас 1 уровень то писаться будет только имя класса.

%L — номер строки в которой произошёл вызов записи в лог.

%m — сообщение, которое передали в лог.

%n — переход на новую строку.


2.2.4 - Для аппендера File используется атрибут fileName, в кот. указывается название лог-файла.

2.2.5 - В теге <Loggers> описываются логеры.
Логер Root необходим по умолчанию. Если не объявлен накакой другой логер, 
то будет использоваться этот, но только для сообщений уровень которых не превышает ERROR.



2.2.6 - Также мы объявляем собственный логер с именем "com.kai.dev.main" и уровнем логирования ALL.
Имя показывает название пакета и максимальный уровень лога для этого пакета ALL. 
Таким образом можно применять разные уровни логиования к разным уровням иерархии пакетов и разным частям проекта.
Т.е. если будет использован логер для класса из этого пакета то будут залогированы сообщения всех уровней.
Для данного логера назначено 2 апендера: для вывода в ФАЙЛ и вывода в КОНСОЛЬ.
Для вывода в ФАЙЛ установлен уровень логирования ALL и это значит что в файл будут записаны лог-сообщения всех уровней.
Для вывода в КОНСОЛЬ установлен уровень DEBUG, т.е. в КОНСОЛЬ будут выведены сообщения, которые именют уровень DEBUG и ниже.

Иерархия уровней логирования:

ALL
TRACE
DEBUG
INFO
WARN
ERROR
FATAL
OFF
 

--------------------------------------------------------------------

3 - Протестируем логирование.

Main.java [com.kai.dev.main.Main]
-----------
package com.kai.dev.main;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;


public class Main {
    
    private static final Logger logger = LogManager.getLogger(Main.class);

    public static void main(String[] args)
    {        
        logger.trace("[TRACE MESSAGE]");
        logger.debug("[DEBUG MESSAGE]");
        logger.info("[INFO MESSAGE]");        
    }    
}
-----------

3.1 - Т.к. класс Main, из кот. мы записываем сообщения в лог находится в пакете "com.kai.dev.main",
то к нему будет пременен логгер, описанный в пункте 2.2.6.

3.2 - Мы пытаемся записать сообщения 3 уровней: TRACE, DEBUG и INFO

3.3 - Для аппендера, кот. выводит сообщения в КОНСОЛЬ установлен уровень DEBUG,
следовательно в консоли мы увидим только сообщения уроня DEBUG и INFO, а TRACE не увидим т.к.
уровень TRACE выше уровня DEBUG.
Вывод:

2016-11-17 09:27:52 DEBUG Main:14 - [DEBUG MESSAGE]
2016-11-17 09:27:52 INFO  Main:15 - [INFO MESSAGE]


3.4 - Для аппендера, кот. выводит сообщения в ФАЙЛ установлен уровень ALL,
следовательно в файл будут выведены все сообщения TRACE, DEBUG и INFO
Вывод:

2016-11-17 09:27:52 TRACE Main:13 - [TRACE MESSAGE]
2016-11-17 09:27:52 DEBUG Main:14 - [DEBUG MESSAGE]
2016-11-17 09:27:52 INFO  Main:15 - [INFO MESSAGE]


 