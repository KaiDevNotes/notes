JAXB предоставляет две основные функции: 
1) МАРШАЛИНГ - преобразование Java-объектов в XML 
2) ДЕМАРШАЛИНГ - преобразование XML в Java-объекты

Библиотека JAXB изначально включена в JDK, следовательно ничего не нужно дополнительно подключать к проекту. 

ПРИМЕРЫ:
--------------------------------------------------------------------------------

1) Сохранение/чтение ОДНОГО объекта в/из XML-файл(а)

1.1 - Создаем класс объекта, который мы хотим сохранять/извлекать в/из xml-файла.
Обозначаем его аннотацией @XmlRootElement, в которой указываем название корневого элеманта.

Person.java
------------

package main;

import javax.xml.bind.annotation.XmlRootElement;


@XmlRootElement(name = "person")
public class Person {
    
    private String firstName;
    private String lastName;
    private Integer age;
    
    public Person(){} 
    
    public Person(String firstName, String lastName, Integer age){
        this. firstName = firstName;
        this.lastName = lastName;
        this.age = age;
    } 
    
    public String getFirstName(){
        return firstName;
    }
    public void setFirstName(String firstName){
        this.firstName = firstName;
    }
    
    public String getLastName(){
        return lastName;
    }
    public void setLastName(String lastName){
        this.lastName = lastName;
    }
    
    public Integer getAge(){
        return age;
    }
    public void setAge(Integer age){
        this.age = age;
    }
    
}


1.2 - В классе Main реализуем 2 метода (методы статические для возможности вызова без создания объекта типа Main):
- doMarshalling - сохраняет переданный ему объект в указанный файл в формате XML.
- doUnmarshalling - преобразует XML из указанного файла в объект и выводит значения его полей в консоль.
Также необходимо помнить о необходимости экранирования разделителей пути к файлу при создании объекта типа File.

Main.java
----------

package main;

import java.io.File;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;


public class Main {
    
    
    public static void doMarshalling(Person person, File file) {
        try { 
            // Создаем контектс JAXB для типа Person
            JAXBContext context = JAXBContext.newInstance(Person.class);
            // Создаем и настраиваем маршалер
            Marshaller m = context.createMarshaller();
            m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
            // Производим машшалинг:
            // преобразование объекта типа Person в XML и запись его в файл .xml  
            m.marshal(person, file);
        } 
        catch (Exception e) { 
            System.err.println("Error !"+e.fillInStackTrace());
        }
    }
    
    
    public static void doUnmarshalling(File file) {
        try { 
            // Создаем контектс JAXB для типа Person
            JAXBContext context = JAXBContext.newInstance(Person.class);
            // Создаем демаршалер
            Unmarshaller um = context.createUnmarshaller();
            // Производим демашшалинг:
            // преобразование XML из файла в объект типа Person 
            Person person = (Person) um.unmarshal(file);
            // Выводим
            System.out.println("");
            System.out.println("First Name: "+person.getFirstName());
            System.out.println("Last Name:  "+person.getLastName());
            System.out.println("Age:        "+person.getAge());
        } 
        catch (Exception e) { 
            System.err.println("Error !");
        }
    }    
    
    
    public static void main(String[] args) {
        // --
        Person persons = new Person("Иван", "Иванов", 20);
        // --
        File file = new File("resources\\person.xml");
        // --
        doMarshalling(persons, file);
        // --
        doUnmarshalling(file);
    }
    
}


1.3 - В результате получаем файл person.xml в папке resources со след. содержимым и следующий вывод в консоль:

person.xml
-----------

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<person>
    <age>20</age>
    <firstName>Иван</firstName>
    <lastName>Иванов</lastName>
</person>

ВЫВОД:
-------

First Name: Иван
Last Name:  Иванов
Age:        20




--------------------------------------------------------------------------------


2) Сохранение/чтение КОЛЛЕКЦИИ объектов в/из XML-файл(а)

2.1 - Создаем класс объектов, коллекцию которых мы хотим сохранять/извлекать в/из xml-файла.

Person.java
------------

package main;


public class Person {
    
    private String firstName;
    private String lastName;
    private Integer age;
    
    public Person(){} 
    
    public Person(String firstName, String lastName, Integer age){
        this. firstName = firstName;
        this.lastName = lastName;
        this.age = age;
    } 
    
    public String getFirstName(){
        return firstName;
    }
    public void setFirstName(String firstName){
        this.firstName = firstName;
    }
    
    public String getLastName(){
        return lastName;
    }
    public void setLastName(String lastName){
        this.lastName = lastName;
    }
    
    public Integer getAge(){
        return age;
    }
    public void setAge(Integer age){
        this.age = age;
    }
    
}


2.2 - Создаем класс-обертку (wrapper), кот. будет хранить коллекцию объектов типа Person.
Обозначаем его аннотацией @XmlRootElement, в которой указываем название корневого элеманта.
Также обозначает аннотацией @XmlElement метод getPersonList(), в аннотации указываем название xml-элемента.

PersonListWrapper.java
-----------------------

package main;

import java.util.List;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;


@XmlRootElement(name = "persons")
public class PersonListWrapper {
    
    private List<Person> persons;
    
    public PersonListWrapper(){}
    
    public PersonListWrapper(List<Person> persons){
        this.persons = persons;
    }
    
    @XmlElement(name = "person")
    public List<Person> getPersonList(){
        return persons;
    }    
    public void setPersonList(List<Person> persons){
        this.persons = persons;
    }
    
}


2.3 - В классе Main реализуем 2 метода (методы статические для возможности вызова без создания объекта типа Main):
- doMarshalling - сохраняет переданный ему объект в указанный файл в формате XML.
- doUnmarshalling - преобразует XML из указанного файла в объект.
Также необходимо помнить о необходимости экранирования разделителей пути к файлу при создании объекта типа File.

Main.java
-----------

package main;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;


public class Main {
    
    
    public static void doMarshalling(PersonListWrapper wrapper, File file) {
        try { 
            // Создаем контектс JAXB для типа PersonListWrapper
            JAXBContext context = JAXBContext.newInstance(PersonListWrapper.class);
            // Создаем и настраиваем маршалер
            Marshaller m = context.createMarshaller();
            m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
            // Производим машшалинг:
            // преобразование объекта типа PersonListWrapper в XML и запись его в файл .xml  
            m.marshal(wrapper, file);
        } 
        catch (Exception e) { 
            System.err.println("Error !"+e.fillInStackTrace());
        }
    }
    
    
    public static void doUnmarshalling(File file) {
        try { 
            // Создаем контектс JAXB для типа PersonListWrapper
            JAXBContext context = JAXBContext.newInstance(PersonListWrapper.class);
            // Создаем демаршалер
            Unmarshaller um = context.createUnmarshaller();
            // Производим демашшалинг:
            // преобразование XML из файла в объект типа PersonListWrapper 
            PersonListWrapper wrapper = (PersonListWrapper) um.unmarshal(file);
            // Получаем коллекцию объектов типа Person
            List<Person> persons = wrapper.getPersonList();
            // Выводим информацию о персонах
            for (Person p : persons){
                System.out.println("");
                System.out.println("First Name: "+p.getFirstName());
                System.out.println("Last Name:  "+p.getLastName());
                System.out.println("Age:        "+p.getAge());
            }
        } 
        catch (Exception e) { 
            System.err.println("Error !");
        }
    }    
    
    
    public static void main(String[] args) {
        // --
        List<Person> persons = new ArrayList<Person>();
        persons.add(new Person("Иван", "Иванов", 20));
        persons.add(new Person("Семен", "Семенович", 30));
        persons.add(new Person("Павел", "Павлович", 40));
        // --
        PersonListWrapper wrapper = new PersonListWrapper(persons);
        // --
        File file = new File("resources\\persons.xml");
        // --
        doMarshalling(wrapper, file);
        // --
        doUnmarshalling(file);
    }
    
}



2.4 - В результате получаем файл person.xml в папке resources со след. содержимым и следующий вывод в консоль:

persons.xml
-----------

<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<persons>
    <person>
        <age>20</age>
        <firstName>Иван</firstName>
        <lastName>Иванов</lastName>
    </person>
    <person>
        <age>30</age>
        <firstName>Семен</firstName>
        <lastName>Семенович</lastName>
    </person>
    <person>
        <age>40</age>
        <firstName>Павел</firstName>
        <lastName>Павлович</lastName>
    </person>
</persons>

ВЫВОД:
-------

First Name: Иван
Last Name:  Иванов
Age:        20

First Name: Семен
Last Name:  Семенович
Age:        30

First Name: Павел
Last Name:  Павлович
Age:        40


