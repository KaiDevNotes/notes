Смотри презентацию "SOLID и GRASP"
http://www.slideshare.net/devel123/solid-grasp-9816996
-------------------------------------------------------------------------------



GRASP (General Responsibility Assignment Software Patterns)
Т.е. паттерны (принципы) распределения обязанностей между объектами системы.
-------------------------------------------------------------------------------


1 - Information Expert

Обязанность должны быть назначены объекту, кот. обладает максимумом информации,
необходимой для ее выполнения.

Т.е. если объект обладает всей необходимой информацией для выполнения операции,
то он и будет ее выполнять, либо делегировать выполнения данной операции объекту, 
который распологает необходимой информацией.

-----------------------


2 - Creator

Объект должен создавать другой объект(ы), т.е. иметь ответственность "создатель" если:
- он содержит или агрегирует создаваемые объекты
- он использует создаваемые объекты
- он знает, как проинициализировать создаваемый объект

Объекты-фабрики так же имеют ответственность "создатель".

-----------------------


3 - Controller

КОНТРОЛЛЕР - это прослойка между МОДЕЛЬЮ (сущностями бизнес-логики) и ПРЕДСТАВЛЕНИЕМ, 
отвечающая за обработку входящих запросов.

-----------------------


4 - Low Coupling

Low Coupling (Слабая связанность) говорит о том, что необходимо распределять обязанности
в системе таким образом, чтобы степень связности между объектами оставалась низкой.



Если объекты сильно связаны, то изменения в одном месте потребуют изменени во множестве 
других мест.

-----------------------



- Information Expert (Информационный эксперт)  
- Creator (Создатель) 
- Controller (Контроллер) 
- Low Coupling (Слабая связанность) 
- High Cohesion (Сильное зацепление) 
- Polymorphism (Полиморфизм) 
- Pure Fabrication (Чистая выдумка) 
- Indirection (Посредник) 
- Protected Variations (Сокрытие реализации)



1 - Information Expert 

Обязанности должны быть назначены объекту, который владеет максимумом
необходимой информации для выполненияобязанности (информационному эксперту).

-----------------------

2 - Creator 

Это применение шаблона Information Expert к проблеме создания объектов.

Класс B должен (может) создавать объекты класса A если:
- Класс B содержит или агрегирует объекты A.
- Класс B записывает экземпляры объектов A.
- Класс B активно использует объекты A
- Класс B обладает данными инициализации для объектов A.

Объекты-фабрики так же имеют ответственность "создатель" (Creator).

-----------------------

3 - Controller 

Берет на себя ответственность за выполнение операций, приходящих от пользователя. 
Как правило, не выполняет работу самостоятельно, а делегирует обязанности 
компетентным объектам.

Пример: Model-View-Controller

-----------------------

4 - Low Coupling 

Распределяет обязанности междуобъектами таким образом, чтобы степень связанности 
между системами оставаласьнизкой.

Степень связанности (coupling) — это мера, определяющая, насколько жестко один 
элемент связан с другими элементами, либо каким количеством данных о других 
элементах он обладает (ссылки на другие объекты).

Свойства элемента с низкой степенью связанности (слабым связыванием):

- Малое число зависимостей между классами (подсистемами). 
Кол-во ссылок на другие объекты в объявлении класса показывает степень связности,
т.е. 1 ссылка - степень связности = 1, 2-е - степень связности = 2 и т.д.

- Слабая зависимость одного класса (подсистемы) от изменений в другом классе (подсистеме).
На основе абстракций, т.е. класс А зависит от интерфейса B и изменение реализации 
интерфейса В не повлияет на класс А.

- Высокая степень повторного использования подсистем.

-----------------------

5 - High Cohesion 

Задает свойство сильного зацепления внутри подсистемы.

Зацепление (cohesion) (функциональное зацепление) — это мера связанности и сфокусированности
обязанностей класса. 

Объект обладает высокой степенью зацепления, если его обязанности тесно связаны между собой 
и он не выполняет огромных объемов работы.

Antipattern: God object

-----------------------

6 - Polymorphism 

Позволяет обрабатывать альтернативные варианты поведения на основе типа и 
заменять подключаемые компоненты системы.

Все альтернативные реализации приводятся к общему интерфейсу.

-----------------------

7 - Pure Fabrication 

Класс, не отражающий никакого реального объекта предметной области, но специально придуманный 
для усиления зацепления, ослабления связанности или увеличения степени повторного использования.

Например: DAO (Data Access Object)

-----------------------

8 - Indirection

Поддерживает слабую связанность путём назначения обязанностей промежуточному объекту.
Пример: Controller в архитектуре Model-View-Controller

-----------------------

9 - Protected Variations 

Защищает элементы от изменения других элементов, вынося взаимодействия в фиксированный интерфейс.
Поведение может варьироваться лишь с помощью создания другой реализации интерфейса.







