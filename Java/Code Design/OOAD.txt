Head First. OOAD
----------------

Object-Oriented Analysis and Design (OOAD) - Объектно-Ориентированный Анализ и Проектирование


3 шага для получения хорошей программы, кот. удовлетворяет заказчика.
-- р. 47

Используйте текстовое описание проблемы, которую вы пытаетесь решить. 
Это поможет проследить за тем, чтобы структура кода соответствовала запланированной функциональности вашего приложения.
-- р. 60

Везде, где вы находите дублирующийся код, ищите возможности для ИНКАПСУЛЯЦИИ!
-- р. 65

Цель ООАП
-- р. 83

Определение понятия: ТРЕБОВАНИЕ
-- р. 94

Лучший способ получить хорошие ТРЕБОВАНИЯ — разобраться в том, что должна делать система.
-- р. 99

Определение понятия: ВАРИАНТ ИСПОЛЬЗОВАНИЯ
-- р. 104-106

Ваша система должна работать в реальном мире, поэтому вы должны планировать и тестировать возможные неполадки.
-- р. 117

Инструментарий ООАП. ТРЕБОВАНИЯ
Ключевые моменты
-- p. 138

ТРЕБОВАНИЯ всегда изменяются. Но при наличии хороших ВАРИАНТОВ ИСПОЛЬЗОВАНИЯ можно быстро адаптировать программный продукт к новым ТРЕБОВАНИЯМ.
-- р. 145

Полный путь прохождения ВАРИАНТА ИСПОЛЬЗОВАНИЯ, от первого шага до последнего, называется СЦЕНАРИЕМ. 
Обычно ВАРИАНТЫ ИСПОЛЬЗОВАНИЯ содержат несколько разных СЦЕНАРИЕВ, но эти сценарии всегда приводят к одной цели пользователя.
-- р. 155

Иногда изменение ТРЕБОВАНИЙ выявляет скрытые проблемы, о которых вы даже не подозревали. 
Изменения происходят постоянно, и ваша система должна улучшаться каждый раз, когда вы над ней работаете.
-- р. 171

Инструментарий ООАП. ПРИНЦИПЫ ООАП: Инкапсулируйте то, что изменяется.
Ключевые моменты
-- p. 172

Пример выполнения ИНКАПСУЛЯЦИИ.
-- р. 254

АНАЛИЗ помогает обеспечить работу вашей системы в КОНТЕКСТЕ реального мира.
-- р. 175

Записывайте свои ВАРИАНТЫ ИСПОЛЬЗОВАНИЯ в том виде, который будет понятен вам, вашему руководству и заказчикам. 
АНАЛИЗ и ВАРИАНТЫ ИСПОЛЬЗОВАНИЯ помогают объяснить заказчикам, начальству и другим разработчикам, как ваша система работает в КОНТЕКСТЕ реального мира.
-- р. 179

ДЕЛЕГИРОВАНИЕ изолирует объекты от изменений реализации других объектов вашей программы.
-- р. 190

Определение понятия: ТЕКСТОЛОГИЧЕСКИЙ АНАЛИЗ
-- р. 197

Пример ТЕКСТОЛОГИЧЕСКОГО АНАЛИЗА
-- р. 195-197

Хороший ВАРИАНТ ИСПОЛЬЗОВАНИЯ четко и точно, на понятном языке объясняет, что должна делать система. 
Когда ВАРИАНТ ИСПОЛЬЗОВАНИЯ будет написан, ТЕКСТОЛОГИЧЕСКИЙ АНАЛИЗ поможет легко и быстро определить КЛАССЫ в вашей системе.
-- р. 201

Обращайте внимание на СУЩЕСТВИТЕЛЬНЫЕ в ВАРИАНТАХ ИСПОЛЬЗОВАНИЯ, даже если они не имеют прямых аналогов среди КЛАССОВ вашей системы. 
Подумайте, как имеющиеся КЛАССЫ могут обеспечить поведение, описанное вашим ВАРИАНТОМ ИСПОЛЬЗОВАНИЯ.
-- р. 203

АНАЛИЗ. Ключевые моменты.
-- р. 219

АБСТРАКТНЫЕ КЛАССЫ могут рассматриваться как условные «представители» конкретных классов реализации. 
АБСТРАКТНЫЙ КЛАСС определяет поведение, а субклассы это поведение реализуют.
-- р. 229

Когда в двух и более местах обнаруживается общее поведение, постарайтесь абстрагировать это поведение в отдельный класс.
-- p. 233

Шпаргалка по UML.
-- р. 235

Программирование на основе ИНТЕРФЕЙСА (а не на основе его реализации) упрощает расширение ваших программ. 
При программировании на основе ИНТЕРФЕЙСА ваш код будет работать со всеми субклассами этого ИНТЕРФЕЙСА, даже с теми, которые еще не созданы.
-- р. 252

ООАП-принципы.
-- р. 260

Субклассы обычно создаются из-за того, что субкласс своим поведением отличается от суперкласса.
Другими словами: Если поведение в субклассах не изменяются то необходимо задуматься о необхимости этих субклассов (может быть они не нужны?).
-- р. 269

Инкапсуляция переменных аспектов делает ваше приложение более гибким и упрощает его модификацию.
-- р. 277

Если у вас имеется набор свойств, состав которого изменяется в зависимости от объекта, организуйте динамическое хранение этих свойств в коллекции (например, Мар). 
Из классов уйдет множество лишних методов, и вам не придется изменять код при добавлении новых свойств в приложение. 
-- р. 279

Определение понятия: СЦЕПЛЕНИЕ (зацепление, сплоченность)
Класс с высоким СЦЕПЛЕНИЕ хорошо делает ЧТО-ТО ОДНО (единственная обязанность или едиственная причина для изменения) и не пытается делать что-то другое.
-- р. 297

--> КОД ДОЛЖЕН БЫТЬ ГИБКИМ, Т.Е. ГОТОВЫМ К ИЗМЕНЕНИЯ, А ТО ЧТО ЧАСТО ПОДВЕРГАЕТСЯ ИЗМЕННИЯМ ИЛИ ПОТЕНЦИАЛЬНО МОЖЕТ ИЗМЕНИТЬСЯ НЕОБХОДИМО ИНКАПСУЛИРОВАТЬ. 
ТАКИМ ОБРАЗОМ МЫ ПРИХОДИМ К ВЫСОКОМУ СЦЕПЛЕНИЮ (КЛАСС ИМЕЕТ ТОЛЬКО ОДНУ ОБЯЗАННОСТЬ) И НИЗКОЙ СВЯЗАННОСТИ.

Инструментарий ООАП. Анилиз и Проектирование. ООАП принципы.
-- р. 304

Большая задача может решаться посредством разбиения на функциональные блоки, после чего вы работаете над каждым блоком по отдельности.
-- р. 307

Получите информацию о функциональных возможностях у заказчика, а затем определите требования, необходимые для их реализации.
-- р. 317

Всегда откладывайте определение подробностей настолько, насколько возможно.
-- р. 320

Анализ предметной области позволяет проверить результаты проектирования и при этом разговаривать с заказчиком на понятном ему языке.
-- р. 332

Определение понятия: АНАЛИЗ ПРЕДМЕТНОЙ ОБЛАСТИ
-- р. 333

Инструментарий ООАП. ПРИНЦИПЫ ООАП.
Ключевые моменты
-- p. 346

Определение понятия: АРХИТЕКТУРА
-- р. 350

Действительно важные аспекты вашего приложения значимы с точки зрения архитектуры, поэтому НАЧИНАТЬ следует именно с них.
-- р. 355

3 основных вопроса архитектуры
-- р. 356

Суть системы то, что она делает на самом общем уровне.
-- р. 359

Занимайтесь одной функциональной возможностью за раз, чтобы снизить риски.
Не отвлекайтесь на функциональные возможности, которые не помогут снизить риски.
-- р. 373

Хорошая структура кода всегда сокращает риск.
-- р. 386

Иногда для создания хорошей программы написание кода лучше отложить на столько, на сколько это возможно.
-- р. 388

Заказчики платят не за оригинальный код, а за хорошие программы.
-- р. 394

Ключевые моменты.
-- р. 396

Применение проверенных принципов ОО-проектирования улучшает гибкость, удобство сопровождения и расширения программы.
-- р. 398

Принцип открытости/закрытости (OCP)
-- р. 399-403

Принцип DRY:
Суть принципа DRY в том, что каждый блок информации и поведения в системе должен существовать в одном разумно выбранном месте.
-- р. 404-407

Принцип единственной обязанности (SRP)
Принцип единственной обязанности реализован правильно, если каждый из ваших объектов имеет только одну причину для изменения.
-- р. 412

Принцип подстановки Лисков (LSP)
-- р. 422

ДЕЛЕГИРОВАНИЕ
-- р. 428

Если вам потребуется использовать функциональность другого класса без ее изменения, рассмотрите возможность использования делегирования вместо наследования.
-- р. 429

При использовании композиции объект, содержащий варианты поведения других объектов, является их владельцем. 
Когда этот объект уничтожается, то вместе с ним уничтожаются все композитные варианты поведения.
Варианты поведения, используемые в композиции, не существуют за пределами самой композиции.
-- р. 433

ДЕЛЕГИРОВАНИЕ, КОМПОЗИЦИЯ, АГРЕГИРОВАНИЕ
Если вы будете использовать делегирование, композицию и агрегирование вместо наследования, ваши программы будут получаться более гибкими и простыми в сопровождении, расширении и повторном использовании.
-- р. 436

Инструментарий ООАП. ПРИНЦИПЫ ООАП.
Ключевые моменты
-- p. 439-440

Хорошие программы пишутся методом итераций. Поработайте над общей картиной, а потом — над каждым фрагментом приложения.
-- р. 446

Варианты итераций:
- Функционально-ориентированная разработка
- Сценарно-ориентированная разработка
-- р. 447-449

Всегда тестируйте свои программы на все возможные варианты использования, которые только сможете придумать. 
Действуйте творчески! Не забывайте тестировать ситуации некорректного использования программных продуктов. 
Вы сможете обнаружить многие ошибки на ранней стадии — заказчики будут довольны.
-- р. 459

Разработка через тестирование направлена на реализацию правильного поведения классов.
-- р. 460

Хорошие программы строятся итеративным  методом. Анализируйте, проектируйте, а затем повторяйте итерации, работая над все более мелкими частями приложения. 
При каждой итерации заново оценивайте свои решения и не бойтесь ИЗМЕНИТЬ что-либо, если это оправданно для вашего решения.
-- р. 471

При контрактном программировании вы и пользователи вашей программы заключаете соглашение о том, что программа должна работать определенным образом. 
-- р. 481

Ключевые моменты.
-- р. 495

Инструментарий ООАП:
- Методологии программирования
- Методы разработки
-- р. 498

Схема жизненого цикла ООАП
-- р. 502-503

Списки функциональных возможностей помогают понять, что должна делать программа. 
Диаграммы вариантов использования помогают представить, как будет использоваться программа, не отвлекаясь на липшие подробности.
-- р. 513

Функциональные возможности — Это описание того, что делает система. Они не всегда напрямую отражаются в вариантах использования. 
Функциональные возможности и варианты использования работают вместе, но это не одно и то же.
-- р. 518

Ваши структурные решения должны  быть основаны  на предполагаемом  использовании системы и на хороших 00-принципах.
-- р. 532

Предоставляйте клиентам доступ только к тем классам, с которыми им НЕОБХОДИМО взаимодействовать. 
Классы, с которыми клиент не взаимодействует, можно изменить с минимальными последствиями для клиентского кода.
-- р. 541

Иногда оказывается, что лучший код для решения конкретной задачи уже был написан. 
Не старайтесь сделать все самостоятельно, если у кого-то уже есть рабочее решение.
-- р. 561

Цель ООАП — обилие возможностей. У задачи  никогда не существует единственно правильного решения, поэтому чем больше у вас возможностей, тем выше вероятность того, что вам удастся найти хорошее решение.
-- р. 568

Паттерны проектирования помогают узнавать и реализовывать ХОРОШИЕ решения стандартных задач. Антипатгерны помогают узнавать ПЛОХИЕ решения стандартных задач и избегать их. 
-- р. 577

Удобочитаемый код упрощает сопровождение и повторное использование — как для вас,  так и для других разработчиков.
-- р. 587

Рефакторинг изменяет внутреннюю структуру кода БЕЗ изменения его поведения.
-- р. 588

Инкапсуляцией называется  защита информации в  программном коде от некорректного использования.
-- р. 596

Определние: ИНКАПСУЛЯЦИЯ
-- р. 598

Инкапсуляция отделяет  данные от поведения приложения. 
Это позволяет вам управлять тем, как каждая часть приложения используется его остальными компонентами.
-- р. 599

Ключевые моменты.
-- р. 600
