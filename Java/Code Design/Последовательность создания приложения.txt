Последовательность создания приложения
--------------------------------------

Рассмотрим на примере создания Web-приложения c использование БД:

1 - Проектируем БД для хранения сущностей предметной области.

2 - Создаем классы сущностей предметной области, отталкиваясь от полей таблиц, созданных в БД для хранения сущностей.
Хранить данные классы будем в пакете [*.*.entity] и его подпакетах, если необходимо.
Класс сущности это обычно POJO, т.е. набор private'ых полей + public getter'ы и setter'ы для них, если необходимо.
Т.е. класс сущности служит только для описания сущности, а его экземпляры этого класса служат только для хранения информации.
Такой класс не реализует никаких служебных интерфейсов.
Например, сущность ПЛАТЕЖНАЯ КАРТА, описывается классом Card, в кот. определены поля, например, id, number, pinCode, ownerId т.п + getter'ы и setter'ы для них.

3 - Реализуем классы DAO (Data Access Object) и singleton DAOFactory в пакете [*.*.dao]

4 - Реализуем классы логики приложения в пакете [*.*.logic]
Такие классы обычно являются СЕРВИСАМИ, имеют название "...Service".
В таких классах-сервисах описываются действия (методы), которые необходимо выполнить над сущностями предметной области.
Например, в приложении должа быть возможность блокировки/разблокировки платежной карты.
В данном случае сущностью предметной области будет ПЛАТЕЖНАЯ КАРТА, описываемая классом Card.
А классом логики будет CardService, в кот. описаны методы block и activate, кот. выполняют блокировку/разблокировку карты. 

5 - Создаем классы исключений в пакете [*.*.exception]

5.1 - Если в логике приложения предусматриваются ожидаемые исключительные ситуации, например,
клиент ввел сумму платежа, кот. превышает баланс его счета.
В таком случае есть смысл выбросит Exception, специфичный для данного приложения.
Например, PaymentAmountException, для описаной выше ситуации, кот. унаследован на класса Exception. 

5.2 - Для ситуаций, когда мы не ожидаем исключительной ситуации, но она может случиться, 
необходимо использовать подходящий по смыслу предопределнный RuntimeException.
Например, при работе с JDBC необходимо перехватывать SQLException, кот. "на все случаи жизни" и обрабатывать его бесполезно.
В таком случае имеет смысл перехватывать SQLException и выбросить подходящий по смыслу RuntimeException, например IllegalStateException.
Т.е. наше приложениие пришло в состояние, при кот. оно не может продолжить выполнение.
В конструктор IllegalStateException передаем сообщение SQLException'a: IllegalStateException(e.getMessage()).

6 - Создаем Unit-тесты (например, JUnit) для классов логики приложения.
Пакеты, содержащие классы тестов должны распологиться в папке "test", кот. находится на одном уровне с папкой "main" (Maven project).
Название пакета должно быть точно такое же [*.*.logic], а вот классы тестов должны иметь название "...ServiceTest".

7 - Создаем Web-часть, т.е. MVC-каркас для приложения (controller'ы и view'хи).
В controller'ах будут использоваться классы СЕРВИСОВ и DAO.
Пакеты для классов web-части будут распологаться под [*.*.web]
Например, классы необходимые для представлений (если это вообще необходимо), будем распологать в пакете [*.*.web.view]
Классы, необходимые для работы с каким-нибуть web framework'ом, например, шаблонизатором jsp-преставлений Apache Tiles можно хранить в пакете [*.*.web.tiles]

