http://code.makery.ch/library/javafx-8-tutorial/ru/

ПОСЛЕДОВАТЕЛЬНОСТЬ создания JavaFX приложения:

1. Создаем "пустой" JavaFX-проект.

2. Создаем пакеты для структурирования приложения в стиле MVC.
*.<app name>
*.<app name>.models
*.<app name>.controllers.views
*.<app name>.resources

3. Создаем FXML-файлы представлений.

4. Создаем классы контроллеров представлений.

5. Связываем предсталения и контроллеры.

6. Создаем главный класса приложения.


Рассмотрим на примере простого приложения, 
которое выводит приветствие после нажатия на кнопку.
--------------------


1) Создаем "пустой" JavaFX-проект:

New Project... -> JavaFX -> JavaFX Application -> Next -> убираем checkbox "Create Application Class"
-----------------------------


2) Создаем пакеты для разделения файлов моделей, контроллеров, представлений (названия произвольны). Например:
*.<app name>.models
*.<app name>.controllers.views

Также можно создать пакет для хратения ресурсов приложения (картинки и тд): 
*.<app name>.resources

В этом примере понадобится 2 пакета:
*.<app name>
*.<app name>.controllers.views

Файлы классов контроллеров представлений и fxml-файлы представлений будут распологаться в пакете *.<app name>.controllers.views, т.к. если эти файлы будут распологаться в разных директориях Scene Builder не сможет с ними работать. 
-----------------------------


3) Создаем FXML-файлы представлений в пакете *.<app name>.controllers.views:

3.1 - (Right click) на пакете *.<app name>.controllers.views -> New -> Empty FXML

3.2 - создадим 2 файла FirstView.fxml (содержит лейбл "Click Me" и кнопку Hello) и SecondView.fxml (содержит лейбл "Hello World" и кнопку Back)

3.3 - открываем их в JavaFX Scene Builder 2.0, добавляем необходимые элементы и ОБЯЗАТЕЛЬНО сохраняем Ctrl+S

[Код FXML-файлов представлений см. ниже]
-----------------------------


4) Создаем классы контроллеров FirstViewController.java и SecondViewController.java для наших представлений

4.1 В обоих классах есть метод setMain для получения ссылки на главный класс приложения Main. Это делается для того чтобы связать класс-контроллер и главный класс приложения, чтобы контроллер имел возможность вызывать методы из главного класса приложения.

4.2 Также в обоих классах есть по 1 методу для обработки клика по кнопке.
Например, в классе FirstViewController это метод handleHelloButton, который реагирует на нажатие кнопки в FirstView. В этом методе вызывается метод showSecondView() из главного класса приложения. Данные методы имеют модификатор доступа private и аннотацию @FXML (необх. для того чтобы этот метод был виден в Scene Builder).

[Код классов контроллеров см. ниже]
-----------------------------


5) Связываем FXML-файлы представлений с классами контроллеров. На примере преставления FirstView.fxml и его контроллера FirstViewController.java (для SecondView.fxml и SecondViewController.java анналогично).

5.1 Открываем FirstView.fxml в JavaFX Scene Builder 2.0

5.2 Привязываем контроллер указав его (или выбрав его) в Controller -> Controller class (указываем название класса вместе с пакетом, т.е. *.<app name>.controllers.views.FirstViewController)

5.3 Привязываем метод обработчик handleHelloButton к кнопке в данном представлении. Для этого выделяем кнопку и в Code -> On Action указываем метод handleHelloButton. Он виден в Scene Builder т.к. отмечен аннотацией @FXML. Теперь клик по кнопке будет вызывать данный метод.
-----------------------------


6) Создаем главный класса приложения Main.java (название призвольно, главное чтобы был метод main) в корневом пакете приложения *.<app name>.

6.1 (Right click) на Source Packages -> New -> JavaFX Main Class...

6.2 В Class Name вписываем, например, Main, а в Package вписываем название "корневого" пакета нашего приложения *.<app name>

6.3 Заменяем его код на код приведенный ниже для Main.java.

6.4 Главный класс приложения расширяет класс Application и должен содержать как миниму 2 метода start и main. 
- main() - вызывает метод launch(), который вызывает метод start()
- start() - запускает поток выполнения JavaFX приложения, из него можно вызывать дополнительные методы для формирования и отображения того или иного представления. Хотя в простых JavaFX приложениях формирование и отображение представления можно осуществлять прямо в методе start().

6.5 В этом приложении в методе start() в качестве аргумента принимается экземпляр типа Stage (подмостков нашего приложения) и далее он присваивается переменной primaryStage.
Также устанавливается Title для окна приложения. И вызывается метод showFirstView() для отображения представления из FirstView.fxml

6.6 В методе showFirstView():
6.6.1 - используем экземпляр типа FXMLLoader для загрузки представления из FirstView.fxml. 
6.6.2 - получаем экземпляр класса-контроллера FirstViewController данного представления и передаем ему ссылку на главный класс приложения (Main) путем вызова метода setMain() класса-контроллера. Это делается для того чтобы связать класс-контроллер и главный класс приложения, чтобы контроллер имел возможность вызывать методы из главного класса приложения.
6.6.3 - создаем экземпляр сцены используя эземпляр представления типа AnchorPane (этот эземпляр представления явл. корневым узелом графа сцены), устанавливаем сцену на подмостки и отображаем графический интерфейс.

6.7 Метод showSecondView() создается и действует анналогично.
-----------------------------

ОПИСАНИЕ РАБОТЫ ПРИЛОЖЕНИЯ:

1 - Когда приложение запускается, вызывается метод showFirstView() и отображается представление описанное в FirstView.fxml. В результате пользователь видит надпись "Click Me" и кнопку "Hello".

2 - В результате нажатия кнопки Hello вызывается привязанный к ней метод handleHelloButton(), который вызывает метод showSecondView() из главного класса приложения.

3 - Метод showSecondView() отображает представление описанное в SecondView.fxml вместо представления описанного в FirstView.fxml. В результате пользователь видит надпись "Hello World" и кнопку "Back".

4 - В результате нажатия кнопки Back вызывается привязанный к ней метод handleBackButton(), который вызывает метод showFirstView() из главного класса приложения. В результате мы опять увидим представление из FirstView.fxml
-----------------------------

ИСХОДНЫЕ КОДЫ ПРИЛОЖЕНИЯ


Представления:

[com.sample.app.controllers.views.FirstView.fxml]
--------
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.text.*?>
<?import java.lang.*?>
<?import java.util.*?>
<?import javafx.scene.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>

<AnchorPane id="AnchorPane" prefHeight="300.0" prefWidth="300.0" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.sample.app.controllers.views.FirstViewController">
   <children>
      <Button layoutX="126.0" layoutY="174.0" mnemonicParsing="false" onAction="#handleHelloButton" text="Hello" />
      <Label alignment="CENTER" layoutX="137.0" layoutY="84.0" text="Click Me" AnchorPane.leftAnchor="5.0" AnchorPane.rightAnchor="5.0" AnchorPane.topAnchor="90.0">
         <font>
            <Font size="39.0" />
         </font>
      </Label>
   </children>
</AnchorPane>


[com.sample.app.controllers.views.SecondView.fxml]
--------
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.text.*?>
<?import java.lang.*?>
<?import java.util.*?>
<?import javafx.scene.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>

<AnchorPane id="AnchorPane" prefHeight="200.0" prefWidth="300.0" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="com.sample.app.controllers.views.SecondViewController">
   <children>
      <Label alignment="CENTER" text="Hello World" AnchorPane.leftAnchor="5.0" AnchorPane.rightAnchor="5.0" AnchorPane.topAnchor="60.0">
         <font>
            <Font size="52.0" />
         </font>
      </Label>
      <Button layoutX="126.0" layoutY="138.0" mnemonicParsing="false" onAction="#handleBackButton" text="Back" />
   </children>
</AnchorPane>


Контроллеры представлений:

[com.sample.app.controllers.views.FirstViewController]
-------
package com.sample.app.controllers.views;

import com.sample.app.Main;
import javafx.fxml.FXML;


public class FirstViewController {
    
    Main main;
    
    public void setMain(Main main) {
        this.main = main;        
    }
    
    @FXML
    private void handleHelloButton(){
        main.showSecondView();
    }
    
}


[com.sample.app.controllers.views.SecondViewController]
-------
package com.sample.app.controllers.views;

import com.sample.app.Main;
import javafx.fxml.FXML;


public class SecondViewController {
    
    Main main;

    public void setMain(Main main) {
        this.main = main;        
    }

    @FXML
    private void handleBackButton(){
        main.showFirstView();
    }
    
}


Главный класс приложения

[com.sample.app.Main]
-------
package com.sample.app;

import com.sample.app.controllers.views.FirstViewController;
import com.sample.app.controllers.views.SecondViewController;
import java.io.IOException;
import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Stage;


public class Main extends Application {
    
    private Stage primaryStage;
    
    public static void main(String[] args){
        launch(args);
    }
    
    @Override
    public void start(Stage primaryStage){        
        this.primaryStage = primaryStage;
        // Устанавливаем title
        this.primaryStage.setTitle("Sample App"); 
        // Отображаем First View
        showFirstView();
    }  
    
    public void showFirstView(){
        try {
            // Загружаем FXML файл представления FirstView
            FXMLLoader loader = new FXMLLoader();
            loader.setLocation(Main.class.getResource("controllers/views/FirstView.fxml"));
            AnchorPane firstViewLayout = (AnchorPane) loader.load();            
            // Передаем ссылку на главный класс приложения Main контроллеру представления
            FirstViewController controller = loader.getController();
            controller.setMain(this);
            // Создаем сцену и устанавливаем ее на подмостки
            Scene scene = new Scene(firstViewLayout);
            primaryStage.setScene(scene);
            // Отображаем весь графический интерфейс
            primaryStage.show();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    public void showSecondView(){
        try {
            // Загружаем FXML файл представления SecondView
            FXMLLoader loader = new FXMLLoader();
            loader.setLocation(Main.class.getResource("controllers/views/SecondView.fxml"));
            AnchorPane secondViewLayout = (AnchorPane) loader.load();           
            // Передаем ссылку на главный класс приложения Main контроллеру представления
            SecondViewController controller = loader.getController();
            controller.setMain(this);      
            // Создаем сцену и устанавливаем ее на подмостки
            Scene scene = new Scene(secondViewLayout);
            primaryStage.setScene(scene);
            // Отображаем весь графический интерфейс
            primaryStage.show();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
        
}



