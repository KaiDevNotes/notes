
ОПИСАНИЕ:

В данном примере будет создана сущность КОНТИНЕНТ, содержащая ID и название.
Будут продемострированы следющие действия над ней:
- отобращение (сохраненние) сущности КОНТИНЕНТ в БД
- ее получение из БД по ID
- изменение
- удаление


CLASSPATH:
----------------------------------------------------
Library: Hibernate 4.x(JPA2.0)
{
antlr-2.7.7.jar
c3p0-0.9.2.1.jar
hibernate-c3p0-4.2.6.Final.jar
dom4j-1.6.1.jar
ehcache-core-2.4.3.jar
hibernate-ehcache-4.2.6.Final.jar
hibernate-core-4.2.6.Final.jar
jboss-logging-3.1.0.GA.jar
hibernate-commons-annotations-4.0.2.Final.jar
hibernate-entitymanager-4.2.6.Final.jar
javassist-3.15.0-GA.jar
jboss-transaction-api_1.1_spec-1.0.1.Final.jar
slf4j-api-1.6.1.jar
slf4j-simple-1.6.1.jar
hibernate-jpa-2.0-api-1.0.1.Final.jar
}
mysql-5.1.10.jar
------------------------------------------------------

Если в Netbeans есть библиотека Hibernate 4.x(JPA2.0), то добавляем ее. 
Если такой библиотеки нет - добавляем .jar, кот. перечислены в фигурных скобках.


1) Создаем обычный Java-проект.


2) В пакете "по умолчанию" создаем конфигурационный файл Hibernate, в котором настраиваются параметры подключения к БД, вывод SQL запросов в консоль, объявляются классы сущностей, которые необходимо сохранять в БД и т.д.

hibernate.cfg.xml
-----------------
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory> 
        <!-- Database dialect --> 
        <property name="dialect">org.hibernate.dialect.MySQLDialect</property>  
        <!-- Database connection settings -->   
        <property name="connection.driver_class">com.mysql.jdbc.Driver</property>
        <property name="connection.url">jdbc:mysql://localhost:3306/hibernate_sample_db</property>
        <property name="connection.username">root</property>
        <property name="connection.password"></property>
        <!--  -->
        <property name="connection.pool_size">10</property>
        <!-- Print all generated SQL to the console -->
        <property name="show_sql">true</property>
        <property name="format_sql">true</property>
        <!-- hbm2ddl.auto = update позволяет автоматически создавать таблицы в БД для сущностей, если таблицы еще не созданы -->
        <property name="hbm2ddl.auto">update</property>
        <property name="hibernate.connection.autocommit">false</property>
        <!-- Enable Hibernate's automatic session context management -->
        <property name="current_session_context_class">thread</property>    
        <!-- Mapped entities -->
        <mapping class="entity.Continent"/>
        <!--  -->
    </session-factory>
</hibernate-configuration>



3) В пакете util создаем класс HibernateUtil.java (название произвольно), который будет отвечать за создание фабрики сессий Hibernate с использованием конфигурационного файла hibernate.cfg.xml. 

util.HibernateUtil.java
-----------------------
package util;

import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class HibernateUtil {
    
    private static SessionFactory sessionFactory = null;

    static {
        try {
            //creates the session factory from hibernate.cfg.xml
            sessionFactory = new Configuration().configure().buildSessionFactory();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static SessionFactory getSessionFactory() {
    	return sessionFactory;
    }
}



4) В пакете entity создаем класс сущности КОНТИНЕНТ Continent.java

4.1 - аннотация @Entity служит для обявления класса сущностью

4.2 - @Table(name="CONTINENTS") говорит о том, что объекты-сущность класса Continent будут сохранятся в таблицу CONTINENTS базы данных.

4.3 - @Column необходима установления соответствия между именем поля сущности и полем таблицы БД, т.е.:
4.3.1 - полю сущности id будет соотв. поле ID в таблице CONTINENTS в БД 
4.3.2 - полю сущности name будет соотв. поле NAME в таблице CONTINENTS в БД 

4.4 - Объявление класса-сущности должно содержать конструктор "по умолчанию", get-ры и set-ры для полей (свойств).


entity.Continent.java
---------------------
package entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import org.hibernate.annotations.GenericGenerator;


// Объявляем класс сущностью, кот. должна быть сохранена в БД 
@Entity
// Сущность Continent будет хранится в таблице CONTINENTS
@Table(name="CONTINENTS")
public class Continent {
    
    private Integer id;	
    private String name;
    
    public Continent(){
        name = null;
    }
    
    public Continent(Continent continent){
        name = continent.getName();
    }
    
    // Устанавливаем автоинкремент для поля Id
    @Id
    @GeneratedValue(generator="increment")
    @GenericGenerator(name="increment", strategy = "increment")
    // Полю сущности id будет соотв. поле ID в таблице CONTINENTS в БД 
    @Column(name="ID")
    public Integer getId() {
        return id;
    }
    public void setId(Integer i){
        id = i;		
    }
    
    // Полю сущности name будет соотв. поле NAME в таблице CONTINENTS в БД 
    @Column(name="NAME")
    public String getName(){
        return name;
    }
    public void setName(String n){
        name = n;
    }    
}



5) Производим следующие операции для сущностью КОНТИНЕНТ: создание (отображение в таблице БД), получение, изменения, удаление.

5.1 - Перед запуском прокта должна быть создана только ПУСТАЯ БД hibernate_sample_db (как указано в hibernate.cfg.xml), т.к. таблицы и связи между ними Hibernate создает самостоятельно на основе заругистрированных сущностей.

5.2 - выполнение перечисленных операций продемонстрировано в классе Main.java


main.Main.java
--------------

package main;

import entity.Continent;
import org.hibernate.Session;
import org.hibernate.criterion.Restrictions;
import util.HibernateUtil;


public class Main {

    public static void main(String[] args) {
        
        Session session = null;
        
        try {
            // Создаем сессию 
            session = HibernateUtil.getSessionFactory().openSession();
            // Начинаем транзакцию
            session.beginTransaction();
            
            // Создаем КОНТИНЕНТ и сохраняем его в БД
            Continent continent = new Continent();
            continent.setName("North America");
            int id = (Integer) session.save(continent);
            System.out.println("--------------------------");
            System.out.println("ID созданного континента = "+id);
            System.out.println("--------------------------");
            
            // Получаем КОНТИНЕНТ c ID = 1
//            Continent continent = (Continent) session.createCriteria(Continent.class).add(Restrictions.eq("id", 1)).uniqueResult();
//            System.out.println("--------------------------");
//            System.out.println("КОНТИНЕНТ: ID = "+continent.getId()+" ---> NAME: "+continent.getName());
//            System.out.println("--------------------------");
            
            // Изменить КОНТИНЕНТ с ID = 1
//            Continent continent = new Continent();
//            continent.setId(1);
//            continent.setName("Europe");
//            session.update(continent);
            
            // Удалить КОНТИНЕНТ с ID = 1
//            Continent continent = new Continent();
//            continent.setId(1);
//            session.delete(continent);
            
            
            // фиксируем (подтверждаем) измененя в БД
            session.getTransaction().commit();
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            if (session != null && session.isOpen()) {
                // Закрываем сессию
                session.close();               
            }
        }        
        
    }
    
}



