[Данный пример основан на web-приложении, созданном и описанном в файле "4. RESTful. Предоставление ресурсов.txt"]

Бывает необходимо КРОССДОМЕННО загружать данные с сервера, которые сервер предоставляет в виде REST-ресурсов.
Если клиенту (браузеру) необходимо только получать REST-ресурсы с сервера, то можно организовать такой обмен с применением связки AJAX + JSONP.
!!! Т.к. JSONP позволяет работать только с GET-запросми.

JSONP - это тот же JSON, только обернутый сервером в функцию, которая позволяет блаузеру получить доступ к данному JSON.

Т.е. если пока отбросит AJAX, то такую загрузку можно проиллюстрировать следующим образом:

1)----------------------------
На стрнаице которую получает браузер размещает в <head> тэг <script> со ссылкой (URL) на необходимый ресурс.
В данный URL в качестве GET-параметра добавляет параметр callback=jsonAccess, где jsonAccess - это название ф-ии, 
в которую сервер обернет возвращаемый JSON, и которая будет вызвана на стороне браузера, когда JSONP вернется в браузер, для получения доступа к переданному JSON на стороне клиента.
(название параметра и функции произвольно)
Т.е. эта функция должна быть заранее объявлена на стороне клиента.
В результате мы получаем следующий код на стороне клиента для получения ресурса, например, с id = 10:  

<head>
	...
	<script>
		function jsonAccess(json){
			console.log("ID: "+json.id+" ----------> Description: "+json.description);
		}
	</script>
	<script src="http://localhost:8080/SpringREST_JSONP/resources/10?callback=jsonAccess"></script>
</head>


2)----------------------------
Далее на стороне сервера нам необходимо произвести необх. настройки чтобы сервер оборачивал JSON-ответ в функцию с необходимым именем.
Т.е. чтобы сервер на GET-запрос http://localhost:8080/SpringREST_JSONP/resources/10?callback=jsonAccess отвечал:

jsonAccess({"id":10,"description":"Resource 11"});

а на обычный GET-запрос на получение того же ресурса http://localhost:8080/SpringREST_JSONP/resources/10 отвечал:

{"id":10,"description":"Resource 11"}

Данная настройка заключается в добавлении класса (имя произвольно) JsonpAdvice.java в пакет, в кот. расположен класс REST Controller'a:

JsonpAdvice.java
----------------
@ControllerAdvice
public class JsonpAdvice extends AbstractJsonpResponseBodyAdvice {
    public JsonpAdvice() {
        super("callback");
    }
} 

В качестве аргумента метода super передается название GET-параметра, который будет содержать имя ф-ии, в кот. необходимо будет обернуть возвращаемый клиенту JSON, т.е. в нашем случае это "callback".



Итого:
------

1) Когда заргужается страница тэг script подгружает в нее данные с указанного URL REST-ресурса.
2) Т.к. данные ответа в формате JSON обернуты в ф-ю jsonAccess, то после загрузки она вызывается и предоставляет доступ к переданному JSON.
3) В результате в консоли браузера мы увидим строку: 
ID: 10 ----------> Description: Resource 11 

------------------------------------------------------------------------------------------------


JSONP + AJAX

Так же JSONP можно получить с сервера и асинхронно используя JQuery AJAX.
В этом нам поможет следующий код AJAX вызова:

<head>
	...    
	<script type="text/javascript" src="jquery-1.7.1.min.js"></script>
	<script type="text/javascript">            
		$(document).ready(function(){               
			$.ajax({
				type: "GET",
				url: "http://localhost:8080/SpringREST_JSONP/resources/10",
				jsonp: "callback",
				contentType: "application/json",
				dataType: "jsonp",
				success: function(json){
					console.log("ID: "+json.id+" ----------> Description: "+json.description);
				}
			});   
		}); 
	</script>
</head>

В параметре jsonp мы указываем название GET-параметра, который будет содержать имя ф-ии, в кот. необходимо будет обернуть возвращаемый клиенту JSON, т.е. в нашем случае это "callback".

В данном случае jquery ajax сам будет генерировать имя ф-ии, получать JSON-ответ сервера и передавать его в ф-ю success, где мы может обрабатывать полученный JSON.










