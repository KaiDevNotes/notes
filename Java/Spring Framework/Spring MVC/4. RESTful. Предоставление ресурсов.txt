ПРЕДИСЛОВИЕ:

Артхитектура REST подразумевает, что URL характеризует ресурс.
А вот действие над этим ресурсом отражается в типе HTTP запроса:
- POST 		- создать, послать
- PUT		- изменить, вставить
- GET		- получить
- DELETE	- удалить

стр. 510

---------------------------------------------------------------------------------------------

Проект для демонстрации создания REST ресурса(-ов) должен содержать следующие библиотеки:

commons-logging-1.1.3.jar
jackson-annotations-2.4.0.jar
jackson-core-2.4.0.jar
jackson-databind-2.4.0.jar
spring-aop-4.1.4.RELEASE.jar
spring-beans-4.1.4.RELEASE.jar
spring-context-4.1.4.RELEASE.jar
spring-core-4.1.4.RELEASE.jar
spring-expression-4.1.4.RELEASE.jar
spring-web-4.1.4.RELEASE.jar
spring-webmvc-4.1.4.RELEASE.jar

---------------------------------------------------------------------------------------------

1) Назовем проект SpringREST
Запрос приходит на web-сервер, который с помощью файла web.xml определяет какому сервлету-диспетчеру 
необходимо передать данный запрос, в данном случае сервлету с именем spring-mvc.

[web.xml]:
----------
<?xml version="1.0" encoding="UTF-8"?>
<web-app 
    version="3.1" 
    xmlns="http://xmlns.jcp.org/xml/ns/javaee" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="
        http://xmlns.jcp.org/xml/ns/javaee 
        http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
>
    <servlet>
        <servlet-name>spring-mvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>spring-mvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
</web-app>



2) В файле сервлета-диспетчера (в файле КОНТЕКСТА Spring MVC пртложения) определяется пакет, 
в котором сервлет-диспетчер будет искать класс-контроллер, содержащий методы для обработки входящих запроса.
В данном случае это пакет: com.kai.spring.rest
Также в КОНТЕКСТЕ включается поддержка аннотаций: <mvc:annotation-driven/>

[spring-mvc-servlet.xml]:
-------------------------
<?xml version='1.0' encoding='UTF-8' ?>
<!-- was: <?xml version="1.0" encoding="UTF-8"?> -->
<beans     
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"> 

    <context:component-scan base-package="com.kai.spring.rest"/>
    
    <mvc:annotation-driven/>

</beans>



3) В указанном пакете создан класс RESTController (название произвольно), который содержит 
методы для обработки входящих запросов на выполнение дейтсвий над ресурсом.
В данном примере будет показана только обработка запроса на получение ресурса(-ов) GET.

[RESTController.java]:
----------------------
package com.kai.spring.rest;

import java.util.ArrayList;
import java.util.List;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


@RestController
@RequestMapping("/resources")
public class RESTController {
        
    @RequestMapping(value = "/{id}", 
                    method = RequestMethod.GET,
                    headers="Accept=application/json")
    public Resource getResource(@PathVariable int id){
        return new Resource(id, "Resource "+(id + 1));
    }
    
    @RequestMapping(method = RequestMethod.GET,headers="Accept=application/json")
    public List<Resource> getAllResources() {
        List<Resource> resources = new ArrayList<Resource>();
        for (int i = 0; i < 5; i++){
            resources.add(new Resource(i, "Resource "+(i + 1)));
        }
        return resources;
    }
    
}


3.1 - @RequestMapping("/resources/") говорит, что объект класса RESTController является 
обработчиком запросов к http://localhost:8080/SpringREST/resources/ 

3.2 - @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers="Accept=application/json") метода getResource говорит, что если придет
GET-запрос на URL например http://localhost:8080/SpringREST/resources/10 то этот метод будет его обрабатывать и в результате вернет объект 
типа Resource в формате JSON.
(@PathVariable int id) позволяет передать переменную id из окончания URL (в данном случае 10) в метод getResource.
Таким образом, если в браузере выполнить запрос http://localhost:8080/SpringREST/resources/10, то в ответ получим:
---------------
{"id":10,"description":"Resource 11"}
---------------

3.3 - Если в запросе не указан id ресурса, т.е. запрос GET придет на URL http://localhost:8080/SpringREST/resources/, то отработает метод
getAllResources, который вернет коллекцию объектов типа Resource в формате JSON
---------------
[{"id":0,"description":"Resource 1"},{"id":1,"description":"Resource 2"},{"id":2,"description":"Resource 3"},{"id":3,"description":"Resource 4"},{"id":4,"description":"Resource 5"}]
---------------



4) Чтобы Spring имел возможность представлять ответ в виде JSON в classpath проекта необходимо добавлять 
библиотеки Jackson JSON (см. выше перечень библиотек проекта).
Также свойства класса (типа) возвращаемого ресурса должны обязательно иметь GET-ры и SET-ры.

[Resource.java]:
----------------
package com.kai.spring.rest;


public class Resource {
    
    private int id;
    private String description;
    
    public Resource(int id, String description){
        this.id = id;
        this.description = description;
    }
    
    public int getId(){
        return id;
    }
    public void setId(int id){
        this.id = id;
    }
    
    public String getDescription(){
        return description;
    }
    public void setDescription(String description){
        this.description = description;
    }
}



