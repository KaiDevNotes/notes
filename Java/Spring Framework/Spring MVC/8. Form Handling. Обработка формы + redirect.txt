Специфика обработки формы (form) Spring MVC в том, что форма связана с объектом какого-либо типа. 
Т.е. поля формы представляют свойства этого объекта (все или их часть).

Для иллюстрации данного примера создадим простое web-приложение, которое на одной странице в форме принимает имя и выводит это имя надругой странице в приветственном сообщении.

Необходимые библиотеки:

commons-logging-1.1.3.jar
spring-aop-4.1.4.RELEASE.jar
spring-beans-4.2.0.RELEASE.jar
spring-context-4.2.0.RELEASE.jar
spring-core-4.2.0.RELEASE.jar
spring-expression-4.1.4.RELEASE.jar
spring-web-4.2.0.RELEASE.jar
spring-webmvc-4.2.0.RELEASE.jar

--------------------------------------------------------------------------------------------------

1) Объект, котрый будет связан с формой в JSP будет иметь класс (тип) UserForm

[UserFrom.java]
---------------

public class UserForm {
    
    private String userName;
    
    public UserForm(){}
    
    public String getUserName(){
        return userName;
    }
    public void setUserName(String userName){
        this.userName = userName;
    }
    
}

--------------------------------------------------------------------------------------------------

2) Контроллер FrontController (название произвольно), содержащий методы-обработчики входящих запросов имеет вид:

[FrontController.java]
-----------------------

@Controller
public class FrontController {
    
    @RequestMapping(value="/auth", method=RequestMethod.GET)
    public String viewAuthForm(Model model){
        model.addAttribute("userForm", new UserForm());
        return "hello-auth";
    }    
    
    @RequestMapping(value="/auth", method=RequestMethod.POST)
    public String checkAuthForm(@Valid UserForm userForm, BindingResult bindingResult, RedirectAttributes redirectAttributes){
        if(bindingResult.hasErrors() || userForm.getUserName().equals("")) {
            return "hello-auth";
        }
        redirectAttributes.addFlashAttribute("userFrom", userForm);
        return "redirect:/hello";
    }
    
    @RequestMapping(value="/hello", method=RequestMethod.GET)
    public String viewHelloPage(@ModelAttribute("userFrom") UserForm userFrom, Model model){
        model.addAttribute("userForm", userFrom);
        return "hello-view";
    }
    
}


--------------------------------------------------------------------------------------------------

3) Метод viewAuthForm() используется для отображения представоения (hello-auth.jsp), которое содержит форму для ввода имени. 

3.1 - Через параметр userForm модели мы передаем объект класса UserForm в пердставление (hello-auth.jsp), для того чтобы связать его с формой в представлении.

[WEB-INF/views/hello-auth.jsp]
--------------------------------

<%@ taglib prefix="spring" uri="http://www.springframework.org/tags"%>
<%@ taglib prefix="sf" uri="http://www.springframework.org/tags/form"%>
<%@page contentType="text/html" pageEncoding="UTF-8"%>
<!DOCTYPE html>

<html>
<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0" />
	<title>Hello Authorization</title>   
</head>

<body>
        
    <sf:form method="POST" modelAttribute="userForm">
        <sf:input path="userName" placeholder="Enter your name..."/>
        <input type="submit"/>
    </sf:form>        
    
</body>
</html>


3.2 - Форма формируется с помощью библиотеки тегов spring tags/form. В форме не указан атрибут action, следовательно форма будет отправлена на URL, с которого она пришла.
Для связи формы с объектом UserForm используется атрибут modelAttribute, в значении которго указывается название параметра модели, которое содержит ссылку на объект класса UserForm (в данном случае userForm).
Для связи поля формы со свойством объекта используется атрибут path, в значении которого указывается название свойства объекта (в данном случае userName).


--------------------------------------------------------------------------------------------------

4) После отправки формы ее обрабатывает метод checkAuthForm().

4.1 - Аннотация @Valid позволяет проверить пришедшую форму на соответствие типу (классу) UserForm

4.2 - Для того, чтобы обновление страницы приветствия не вызывало повторной отпрвки формы (POST) нам необходимо выполнить РЕДИРЕКТ на страницу с URL ../hello. 
Также при РЕДИРЕКТЕ нам необходимо передать полученный через POST объект UserForm, который содержит имя, введенное пользователем на странице авторизации.
Это делается через объект класса RedirectAttributes.

--------------------------------------------------------------------------------------------------

5) Данный РЕДИРЕКТ (GET-запрос на URL ../hello) будет обработан методом viewHelloPage()

5.1 - Аннотация @ModelAttribute позволяет получить доступ к атрибуту, через который мы передает объект класса UserForm при РЕДИРЕКТЕ.

5.2 - Далее через объект модели мы передаем объект класса UserForm в представление (hello-view.jsp), где выводим клиенту приветственное сообщение.

[WEB-INF/views/hello-view.jsp]
--------------------------------

<%@page contentType="text/html" pageEncoding="UTF-8"%>
<!DOCTYPE html>

<html>
<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0" />
	<title>Hello</title>   
</head>

<body>
    
    <%
        UserForm userForm = (UserForm) request.getAttribute("userFrom");
    %>
        
    <h1>Hello, <%= userForm.getUserName() %> !</h1>        
    
</body>
</html>




