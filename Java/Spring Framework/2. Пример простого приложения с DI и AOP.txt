Чтобы приложение на Spring с DI и AOP корректно собиралось необх. добавить в проект след. библиотеки:
--------------------------------------------------------------------
aopalliance-1.0.jar
aspectjweaver-1.6.6.jar
cglib-2.2.jar
commons-logging-1.1.1.jar
log4j.jar
org.springframework.aop-3.0.3.RELEASE.jar
org.springframework.asm-3.0.3.RELEASE.jar
org.springframework.beans-3.0.3.release.jar
org.springframework.context.support-3.0.3.release.jar
org.springframework.context-3.0.3.RELEASE.jar
org.springframework.core-3.0.3.RELEASE.jar
org.springframework.expression-3.0.3.RELEASE.jar
--------------------------------------------------------------------


Использование Spring с использованием DI и AOP опишем на примере ПРИНТЕРА, у которого будет только 1 метод "print" и работу которого необходимо логировать.

public interface Printer {
    
    public void print();
    
}

--------------------------------------------------------------------

Конкретной реализацией ПРИНТЕРА будет принтер фирмы HP. 
В качестве аргумента конструктора он принимает объект типа Document.

public class HPPrinter implements Printer {
    
    private Document doc;
    
    public HPPrinter(Document doc){
        this.doc = doc;
    }
    
    public void print(){
        System.out.println("--------Printing by HP---------");
        System.out.println(doc.getDate());
        System.out.println(doc.getText());
        System.out.println("-------------------------------");
    }    
    
}

--------------------------------------------------------------------

У типа ДОКУМЕНТ есть 2 метода getDate и getText

public interface Document {
    
    public String getDate();    
    public String getText();
    
}

--------------------------------------------------------------------

Конкретной реализацией ДОКУМЕНТА будет протокол.

public class Protocol implements Document {
    
    private String date = "6/10/2015";
    private String text = "Protocol: My first protocol";
    
    public String getDate(){
        return date;
    }
    
    public String getText(){
        return text;
    }
    
}

--------------------------------------------------------------------

Так как нам необходимо осуществлять логирование процесса работы принтера, нам понадобится АСПЕКТ ЛОГИРОВАНИЯ,
в котором определены 2 метода: before - будет вызван перед стартом работы ПРИНТЕРА и after - после.

public class LoggingAspect {
    
    public void before(){
        System.out.println("");
        System.out.println("Start printing...");
        System.out.println("");
    }
    
    public void after(){
        System.out.println("");
        System.out.println("Printing finished.");
        System.out.println("");
    }
    
}

--------------------------------------------------------------------

Далее нам необходимо создать КОНТЕКСТ приложения context.xml (название произвольно).
В КОНТЕКСТЕ описываются компоненты приложения (bean), связи между компонентами и аспекты приложения (такие как логирование, управление транзакциями, безопасность).
КОНТЕКСТ нашего приложения выглядит следующим образом:

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:aop="http://www.springframework.org/schema/aop"
xmlns:context="http://www.springframework.org/schema/context"
xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-3.0.xsd">
    
    <bean id="printer" class="go.spring.HPPrinter">
        <constructor-arg ref="protocol" />
    </bean>
    
    <bean id="protocol" class="go.spring.Protocol" />
    
    <bean id="logger" class="go.spring.LoggingAspect" />
    
    <aop:config>
        <aop:aspect ref="logger">
            <aop:pointcut id="printLog" expression="execution(* go.spring.Printer.print(..))" />
            <aop:before pointcut-ref="printLog" method="before"/> 
            <aop:after pointcut-ref="printLog" method="after"/> 
        </aop:aspect>
    </aop:config>

</beans>

--------------------------------------------------------------------

В результате выполнения данного приложения...

public class Main {
    
    public static void main(String[] args){       
                
        ApplicationContext context = new ClassPathXmlApplicationContext("context.xml");
        
        Printer printer = (Printer) context.getBean("printer");
        printer.print();
        
    }
    
}

...получаем следующий вывод:

Start printing...

--------Printing by HP---------
6/10/2015
Protocol: My first protocol
-------------------------------

Printing finished. 

--------------------------------------------------------------------

В данном примере ПРИНТЕР связан с ДОКУМЕНТОМ через DI (dependency injection).
Т.е. ПРИНТЕРУ через конструктор передается объект типа ДОКУМЕНТ.
А вот какая именно реализация типа ДОКУМЕНТ (протокол, справка, договор и тп) будет передана принтеру определяется в КОНТЕКСТЕ.
т.е. в нашем примере компоненту printer (основан на классе HPPrinter) через конструктор передается компонент protocol (основан на классе Protocol).
КОНТЕКСТ позволяет конфигурировать приложение.

--------------------------------------------------------------------

Для того чтобы не возлагать обязанности логирования своей работы на ПРИНТЕР мы выделяем процесс логирования в АСПЕКТ.

Для этого в КОНТЕКСТЕ определяем компонент logger (основан на классе LoggingAspect) и далее конфигурируем его как АСПЕКТ.
<aop:aspect ref="logger">

Далее определяем точку к которой будет отнесен наш АСПЕКТ. В нашем случае это метод print() объекта типа Printer.
<aop:pointcut id="printLog" expression="execution(* go.spring.Printer.print(..))" />

Далее определяем какие методы нашего АСПЕКТА будут выполнены до и после точки, к которой этот АСПЕКТ относится, т.е. до и после вызова метода print().
В нашем случае это методы before() и after().

<aop:before pointcut-ref="printLog" method="before"/> 
<aop:after pointcut-ref="printLog" method="after"/>
 
--------------------------------------------------------------------
