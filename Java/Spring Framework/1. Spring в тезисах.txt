[Java Spring в действии. Уоллс К. 2013]



------------------------------------------------------------------------------------------------------------

Spring позволяет использовать POJO (простые Java-объекты)

Классы POJO должны создаваться как реализации интерфейсов (не уверен, что всегда, но в примерах из книги
делается именно так). 

------------------------------------------------------------------------------------------------------------

В Spring-приложении главную роль играет КОНТЕКСТ приложения (xml-файл).
КОНТЕКСТ приложения определяет компоненты (bean) этого приложения и связи (зависимости) меджу ними.
Т.е. за создание объектов, составляющих приложение, и их связывание полностью отвечает КОНТЕКСТ приложения.

------------------------------------------------------------------------------------------------------------

Компонент - это POJO, зарегистрированный в КОНТЕКСТЕ приложения через тег <bean>

------------------------------------------------------------------------------------------------------------

DI (dependency injection) - внедрение зависимостей.
или (это одно и то же)
IoC (Inversion of Control)

DI - это внедрениние в компонент через конструктор или через запись в свойство ссылки на другой компонент 
или коллекции компонентов.

Т.е. связь между POJO осуществляется не напрямую в коде классов POJO, а декларативно в КОНТЕКСТЕ, 
что способствует ослаблению связей между классами объектов.

------------------------------------------------------------------------------------------------------------

Связывать компоненты можно в КОНТЕКСТЕ или прямо в коде классов POJO с использованием АННОТАЦИЙ.

Связывать компоненты можно явно или используя способы автоматического связывания в КОНТЕКСТЕ или с 
использованием АННОТАЦИЙ. (4.1.1 стр.169)

Для обеспечение возможности связывания с использованием АННОТАЦИЙ в КОНТЕКСТ необходимо добавить строку:
<context:annotation-config />

------------------------------------------------------------------------------------------------------------

Для уменьшения размера файла КОНТЕКСТА помимо автоматического связывания можно использовать АВТОМАТИЧЕСКОЕ
ОПРЕДЕЛЕНИЕ КОМПОНЕНТОВ (4.3 стр.188)

Для обеспечение возможности использования автоматического определения компонентов в КОНТЕКСТ необходимо 
добавить: <context:component-scan>

------------------------------------------------------------------------------------------------------------

SpEL (Spring Expression Language) - мощный, но краткий способ внедрения значений в свойства компонентов или
в аргументы конструкторов с помощью выражений, которые вычисляются на этапе выполнения.

Основные возможности SpEL:
- получение ссылок на компоненты по их идентификаторам;
- вызов методов и обращение к свойствам объектов;
- математические и логические операции над значениями, а также операции отношения;
- сопоставление с регулярными выражениями;
- операции с коллекциями.

------------------------------------------------------------------------------------------------------------

Конфигурировать Spring-приложение (объявлять компоненты, связи между компонентами, аспекты) можно не только 
в xml-файле конфигурации (в файле контекста), но и прямо в коде Java (4.4 стр.192)

------------------------------------------------------------------------------------------------------------

AOP - аспектно-ориентированное прогаммирование

AOP делает возможным отделение "сквозных служб" от прикладных компонентов и декларативное их применение 
к необходимым прикладным компонентам в виде аспектов.
"сквозные службы": журналирование, управление транзакциями, безопасность - т.е. задачи которые не должен 
выполнять прикладной объект

Аспекты можно объявлять в КОНТЕКСТЕ или прямо в коде классов POJO с использованием АННОТАЦИЙ.

Spring предоставляет фреймворк AOP, позволяющий окружать аспектами вызовы методов.
Т.е. СОВЕТ аспекта может быть выполнен до, после или и до и после вызова целевого метода.

Если необходимо окружать аспектами вызовы коструктора или изменение свойства, то необходимо обращаться 
к расширению AspectJ для реализации более мощных аспектов.

Аспекты позволяют внедрять в классы POJO дополнительные методы без изменения их исходного кода. 
(5.3.4 стр. 221)

------------------------------------------------------------------------------------------------------------



------------------------------------------------------------------------------------------------------------