Mockito Overview:
-----------------

Mockito - это framework для создания ОБЪЕКТОВ-ЗАГЛУШЕК (Mock'ов или Stub'ов, 
как кто называет), кот. можно использовать в Unit-тестах.

Мы используем ЗАГЛУШКИ, когда тестируемый unit зависит от какого сложного
в инициализации объекта, удаленной службы, БД и т.д.

В проекте-примере "Mockito_example" роль таких "сложных" объектов выполняют
интерфейсы Foo и FooVoid (для случая, когда метод возвращает void) и от них 
зависят тестируемы unit'ы Bar и BarVoid.

Т.е. у нас нет конкретных реализаций интерфейсов Foo и FooVoid и для получения 
фиктивн реализации для дальнейшей передачи их тестируемым unit'ам Bar и BarVoid
мы используем Mockito framework.

Хорошая презентация:
http://www.slideshare.net/nunafig/mockito-12079903?next_slideshow=1


----------------------------------------------------------

Для работы с Mockito необходимо добавить 2 зависимости в pom.xml:

<dependency>
	<groupId>org.mockito</groupId>
	<artifactId>mockito-all</artifactId>
	<version>1.10.18</version>
</dependency>
<dependency>
	<groupId>junit</groupId>
	<artifactId>junit</artifactId>
	<version>4.12</version>
</dependency>


----------------------------------------------------------

В Maven-проекте классы тестов Unit'ов должны распологаться в таком же пакете 
как и класс самого Unit'a, но не в директории main, а в директории test. 
И иметь название [UnitName]Test.java

Например:

Тестируемый Unit лежит в пакете: kai.dev.unit.Bar
Т.е. в директории: src\main\java\kai\dev\unit\Bar.java

А тест для данного Unit'a лежит в таком же пакете и имеет название, кот. 
оканчивается на Test: kai.dev.unit.BarTest
И лежит в директории: src\test\java\kai\dev\unit\BarTest.java


----------------------------------------------------------

Mockito позволяет:

1) Создавать ЗАГЛУШКИ с  помощью метода Mockito.mock(...) и 

1.1 - проверять вызывался ли метод ЗАГЛУШКИ

1.2 - иммитировать необходимое поведение (возвращаемое значение) в ответ на
вызов данного метода с определнными параметрами

1.3 - Выбрасывать необходимое исключение в случае вызова метода


2) В Mockito.mock(...) можно передавать реальный класс и вызывать реальные метода 
данного класса, или задавать ему новое "фиктивное" поведение


3) Следить за методами конкретного класса используя Mockito.spy(...)